8.4 change reference to value(将引用对象改为值对象)

有一个引用对象，很小且不可变，而且不易管理，将它变成一个值对象。

动机：
如果引用对象开始变得难以使用，也许就该将它改为值对象。引用对象必须被某种方式控制，你总是必须向其控制者请求适当的对象。
它们可能造成内存对象之间的错综复杂的关联，在分布式系统和并发系统中，不可变值对象特别有用，因为你无需考滤它们的同步

值对象的一个非常重要的特征：它们是不可变的，无论何时，你只要调用同一个同象的同一个查询函数，都应该得到同样的结果。

做法：
1，检查重构对象是否为不可变对象，或是否可以修改为不可变对象。
如果该对象目前还不是不可变的，请使用Remove Setting Method,直到它不可变为止，
如果无法将该对象修改为不可变的，请放弃使用本项重构。
2，建立equals()和hashCode()
3,编译，测试
4，考虑是否可以删除工厂函数，将将构建函数声明为public

src:
public class Currency {

  private String code;

  public String getCode() {
    return code;
  }

  private Currency(String code) {
    this.code = code;
  }

  public static Currency get(String type) {
    return new Currency(type);
  }
}

refactor:

public class Currency {

  private String code;

  public String getCode() {
    return code;
  }

  private Currency(String code) {
    this.code = code;
  }

  public static Currency get(String type) {
    return new Currency(type);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    if (!(o instanceof Currency)) {
      return false;
    }
    Currency currency = (Currency) o;
    return this.code.equals(currency.getCode());
  }

  @Override
  public int hashCode() {
    return code.hashCode();
  }
}

2,去掉工厂方法，改为公共函数
public class Currency {

  private String code;

  public String getCode() {
    return code;
  }

  /**
   * 改靠为公共函数
   *
   * @param code
   */
  public Currency(String code) {
    this.code = code;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    if (!(o instanceof Currency)) {
      return false;
    }
    Currency currency = (Currency) o;
    return this.code.equals(currency.getCode());
  }

  @Override
  public int hashCode() {
    return code.hashCode();
  }
}