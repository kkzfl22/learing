Replace Type Code with Class (以类取代类型码)

类之中有一个数值类型码，但它并不影响类的行为
以一个新的类替换该数值类型码。

原因:
任何接收类型码作为参数的函数，所期望的实际上只一个数值，无法强制使用符号名。
这会大大降低代码的可读性，从而成为bug之源。

做法：
1，为类型码新建一个类。
2，修改源类实现，让它使用上述新建的类。
3，编译测试
4，对于源类中每一个使用类型码的函数。相应的建立一个函数，让新函数使用新建立的类。
5，逐一修改源类中的用户。
6，每修改一个用户，编译并测试。
7，删除使用类型码的旧接口，并删除保存旧在类型的静态变量
8，编译，测试。

src:
public class Person {

  public static final int O = 0;

  public static final int A = 1;

  public static final int B = 2;

  public static final int AB = 3;

  public int bloodGroup;

  public Person(int bloodGroup) {
    this.bloodGroup = bloodGroup;
  }

  public void setBloodGroup(int bloodGroup) {
    this.bloodGroup = bloodGroup;
  }

  public int getBloodGroup() {
    return bloodGroup;
  }
}


refactor:
1,新建一个表示血液的类
public class BloodGroup {

  public static final BloodGroup GROUPO = new BloodGroup(0);

  public static final BloodGroup GROUPA = new BloodGroup(1);

  public static final BloodGroup GROUPB = new BloodGroup(2);

  public static final BloodGroup GROUPAB = new BloodGroup(3);

  private static final BloodGroup[] GROUPS = new BloodGroup[] {GROUPO, GROUPA, GROUPB, GROUPAB};

  private final int code;

  public static BloodGroup code(int index) {
    return GROUPS[index];
  }

  private BloodGroup(int code) {
    this.code = code;
  }

  public int getCode() {
    return code;
  }
}

2,修改源类，让它使用person类
public class Person {

  public static final int O = BloodGroup.GROUPO.getCode();

  public static final int A = BloodGroup.GROUPA.getCode();

  public static final int B = BloodGroup.GROUPB.getCode();

  public static final int AB = BloodGroup.GROUPAB.getCode();

  public BloodGroup bloodGroup;

  public Person(int bloodGroup) {
    this.bloodGroup = BloodGroup.code(bloodGroup);
  }

  public void setBloodGroup(int bloodGroup) {
    this.bloodGroup = BloodGroup.code(bloodGroup);
  }

  public int getBloodGroup() {
    return bloodGroup.getCode();
  }
}

3，对方法的函数进行重命名操作
public class Person {

  public static final int O = BloodGroup.GROUPO.getCode();

  public static final int A = BloodGroup.GROUPA.getCode();

  public static final int B = BloodGroup.GROUPB.getCode();

  public static final int AB = BloodGroup.GROUPAB.getCode();

  public BloodGroup bloodGroup;

  public Person(int bloodGroup) {
    this.bloodGroup = BloodGroup.code(bloodGroup);
  }

  public void setBloodGroup(int bloodGroup) {
    this.bloodGroup = BloodGroup.code(bloodGroup);
  }

  /**
   * 地命重命名函数
   *
   * @return
   */
  public int getBloodGroupCode() {
    return bloodGroup.getCode();
  }
}

4，加入新的取值函数
public class Person {

  public static final int O = BloodGroup.GROUPO.getCode();

  public static final int A = BloodGroup.GROUPA.getCode();

  public static final int B = BloodGroup.GROUPB.getCode();

  public static final int AB = BloodGroup.GROUPAB.getCode();

  public BloodGroup bloodGroup;

  public Person(int bloodGroup) {
    this.bloodGroup = BloodGroup.code(bloodGroup);
  }

  public void setBloodGroup(int bloodGroup) {
    this.bloodGroup = BloodGroup.code(bloodGroup);
  }

  /**
   * 地命重命名函数
   *
   * @return
   */
  public int getBloodGroupCode() {
    return bloodGroup.getCode();
  }

  /**
   * 加入新的取值函数
   *
   * @return 血液类型对象
   */
  public BloodGroup getBloodGroup() {
    return bloodGroup;
  }
}


5，建立新的构建函数和设值函数
public class Person {

  public static final int O = BloodGroup.GROUPO.getCode();

  public static final int A = BloodGroup.GROUPA.getCode();

  public static final int B = BloodGroup.GROUPB.getCode();

  public static final int AB = BloodGroup.GROUPAB.getCode();

  public BloodGroup bloodGroup;

  public Person(int bloodGroup) {
    this.bloodGroup = BloodGroup.code(bloodGroup);
  }

  public void setBloodGroup(int bloodGroup) {
    this.bloodGroup = BloodGroup.code(bloodGroup);
  }

  /**
   * 建立构建函数
   *
   * @param bloodGroup
   */
  public Person(BloodGroup bloodGroup) {
    this.bloodGroup = bloodGroup;
  }

  /**
   * 设值函数
   *
   * @param bloodGroup
   */
  public void setBloodGroup(BloodGroup bloodGroup) {
    this.bloodGroup = bloodGroup;
  }

  /**
   * 地命重命名函数
   *
   * @return
   */
  public int getBloodGroupCode() {
    return bloodGroup.getCode();
  }

  /**
   * 加入新的取值函数
   *
   * @return 血液类型对象
   */
  public BloodGroup getBloodGroup() {
    return bloodGroup;
  }
}

6,修改引用点
由原来的
Person instance = new Person(Person.A);
变成
Person instance = new Person(BloodGroup.GROUPA);

其他修改点也同样的，将类型进行修改


7：删除原来的旧的取值函数与旧的设置函数及构建方法
以下代码全部删除

public class Person {

 public static final int O = BloodGroup.GROUPO.getCode();

  public static final int A = BloodGroup.GROUPA.getCode();

  public static final int B = BloodGroup.GROUPB.getCode();

  public static final int AB = BloodGroup.GROUPAB.getCode();


   private Person(int bloodGroup) {
      this.bloodGroup = BloodGroup.code(bloodGroup);
    }

    private void setBloodGroup(int bloodGroup) {
      this.bloodGroup = BloodGroup.code(bloodGroup);
    }

 /**
   * 地命重命名函数
   *
   * @return
   */
  public int getBloodGroupCode() {
    return bloodGroup.getCode();
  }
}

8:执行单元测试，以确保重构没有对现有功能造成任何的影响。