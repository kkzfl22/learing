move Method(搬移函数）
在程序中，有个函数与其所驻类之外的另一个类进行更多的交流：调用后者，或被后者调用。
在该函数最常用引用的类中建立一个有着类似行为的新函数。将旧函数变成 一个单纯的委托函数，或者是将旧函数完全移除。

搬移函数是重构的理论支柱。
如果一个类有太多的行为，或者如果一个类与另一个类有太多合作而形成高度的耦合，就应该搬移函数。
通过这种手段，可以使系统中的类更简单，这些类最终也将更干净利落地实体系统交付的任务。

做法:
1，检查源类中的被源函数所使用的一切特性。考虑它们是否也该被搬移。
2，检查源类的子类和超类，看看是否有该函数的其他声明。
3，在目标类中声明这个函数
4，将源函数的代码复制到目标函数中，调整后者。使其在新类中正常工作。
5，编译目标类。
6，决定如何从源函数正确引用目标对象
7，修改源函数，使之成为一个纯委托。
8，编译，测试
9，决定是否删除源函数，或者将它当作一个委托函数保留下来
10，如果要移除源函数，请将源类中对函数的所有调用。替换为目标函数的调用。


重构前
public class Account {

  private final AccountType type;

  private final int dayOverdrawn;

  public Account(AccountType type, int dayOverdrawn) {
    this.type = type;
    this.dayOverdrawn = dayOverdrawn;
  }

  /**
   * 帐户透支的费用
   *
   * @return
   */
  double overdraftCharge() {
    // 是否产生额外的费用
    if (type.isPremium()) {
      double result = 10;
      if (dayOverdrawn > 7) {
        result += (dayOverdrawn - 7) * 0.85;
      }
      return result;
    } else {
      return dayOverdrawn * 1.75;
    }
  }

  /**
   * 银行的费用
   *
   * @return
   */
  double bankCharge() {
    double result = 4.5;
    if (dayOverdrawn > 0) {
      return result += overdraftCharge();
    }
    return result;
  }
}

public class AccountType {

  /**
   * 是否产生额外的费用
   *
   * @return true，产生额外的费用,false 不产生额外的费用
   */
  boolean isPremium() {
    return true;
  }
}

重构:
假设有几种账户，需要每一种都 有自己的“透支金额计费规则”。所以需要将计费规则搬移动AccountType中去


1,将函数整个拷贝至AccountType中
public class AccountType {

  /**
   * 是否产生额外的费用
   *
   * @return true，产生额外的费用,false 不产生额外的费用
   */
  boolean isPremium() {
    return true;
  }


  double overdraftCharge() {
    // 是否产生额外的费用
    if (type.isPremium()) {
      double result = 10;
      if (dayOverdrawn > 7) {
        result += (dayOverdrawn - 7) * 0.85;
      }
      return result;
    } else {
      return dayOverdrawn * 1.75;
    }
  }

}

2，调整AccountType中的overdraftCharge函数
public class AccountType {

  /**
   * 是否产生额外的费用
   *
   * @return true，产生额外的费用,false 不产生额外的费用
   */
  boolean isPremium() {
    return true;
  }

  /**
   * 透支金额的计费规则
   * @param dayOverdrawn 时间
   * @return 费用
   */
  double overdraftCharge(int dayOverdrawn) {
    // 是否产生额外的费用
    if (this.isPremium()) {
      double result = 10;
      if (dayOverdrawn > 7) {
        result += (dayOverdrawn - 7) * 0.85;
      }
      return result;
    } else {
      return dayOverdrawn * 1.75;
    }
  }
}
关于调整有4种实现方案：
1，将特性移动到目标类。（完整的移动）
2，建立或者使用一个从目标类到源类的引用。
3，将源对象作为参数传递给目标函数。
4，如果所需是个变量，将这个变量作为参数传递给目标函数。（此例使用此种)

3，对源类进行调整
public class Account {

  private final AccountType type;

  private final int dayOverdrawn;

  public Account(AccountType type, int dayOverdrawn) {
    this.type = type;
    this.dayOverdrawn = dayOverdrawn;
  }

  /**
   * 帐户透支的费用
   *
   * @return
   */
  double overdraftCharge() {
    //建立到目标类的影射关系。
    return type.overdraftCharge(dayOverdrawn);
  }

  /**
   * 银行的费用
   *
   * @return
   */
  double bankCharge() {
    double result = 4.5;
    if (dayOverdrawn > 0) {
      return result += overdraftCharge();
    }
    return result;
  }
}
还有一种实现就是查找此函数的相关引用，对这些引用替换为到AccountType的调用。

4，编译，测试。





第二种重构方案：
将源对象作为参数传递给目标函数。
public class AccountType {

  /**
   * 是否产生额外的费用
   *
   * @return true，产生额外的费用,false 不产生额外的费用
   */
  boolean isPremium() {
    return true;
  }

  /**
   * 透支金额的计费规则
   *
   * @param account 源对外的引用
   * @return 费用
   */
  double overdraftCharge(Account account) {
    // 是否产生额外的费用
    if (this.isPremium()) {
      double result = 10;
      if (account.getDayOverdrawn() > 7) {
        result += (account.getDayOverdrawn() - 7) * 0.85;
      }
      return result;
    } else {
      return account.getDayOverdrawn() * 1.75;
    }
  }
}


修改源类的中相关引用。
public class Account {

  private final AccountType type;

  private final int dayOverdrawn;

  public Account(AccountType type, int dayOverdrawn) {
    this.type = type;
    this.dayOverdrawn = dayOverdrawn;
  }

  /**
   * 帐户透支的费用
   *
   * @return
   */
  double overdraftCharge() {
    // 建立到目标类的影射关系。
    return type.overdraftCharge(this);
  }

  /**
   * 银行的费用
   *
   * @return
   */
  double bankCharge() {
    double result = 4.5;
    if (dayOverdrawn > 0) {
      return result += overdraftCharge();
    }
    return result;
  }

  public int getDayOverdrawn() {
    return dayOverdrawn;
  }
}

编译并测试


